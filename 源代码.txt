1.1.Gaussian_noise

imagepath = 'F:\Digital Image Processing\work\The sixth\lena.bmp';
lena = imread(imagepath);
figure(1)
subplot(2,2,1);
imshow(lena)
title('lena原图');
%添加高斯噪声
u = [0 0 0.5];%均值
sigma2 = [0.01 0.05 0.01];%方差
str1 = '添加gaussian噪声后的图像';
str2 = 'u=';
str4 = 'sigma^2=';
for m=1:3
    noise_lena = imnoise(lena,'gaussian',u(m),sigma2(m));
    subplot(2,2,m+1)
    imshow(noise_lena)
    %添加标题
    str3 = num2str(u(m));
    str5 = num2str(sigma2(m));
    string = [str1,',',str2,str3,',',str4,str5];
    title(string);
end   
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

1.2.五种滤波器处理

imagepath = 'F:\Digital Image Processing\work\The sixth\lena.bmp';
lena = imread(imagepath);
noise_lena = imnoise(lena,'gaussian',0,0.01);%取高斯噪声均值为0，方差为0.01
%滤波前准备
n=5;
gap=(n-1)/2;
[M,N]=size(noise_lena);
image=double(noise_lena);
%算数均值滤波
AmF=ones(n,n);
AmF=AmF/n^2; %滤波模板
for i=gap+1:M-gap
    for j=gap+1:N-gap
        temp=image(i-gap:i+gap,j-gap:j+gap).*AmF(1:n,1:n);
        image2(i,j)=sum(temp(:));
    end
end
image2=uint8(image2);
figure(1)
subplot(1,2,1);
imshow(noise_lena)
title('高斯噪声污染的lena');
subplot(1,2,2);
imshow(image2)
title("算术均值滤波");
%几何均值滤波
GmF=ones(n,n);
for i=gap+1:M-gap
    for j=gap+1:N-gap
        temp=image(i-gap:i+gap,j-gap:j+gap).*GmF(1:n,1:n);
        image2(i,j)=prod(temp(:))^(1/(n*n));
    end
end
image2=uint8(image2);
figure(2)
subplot(1,2,1);
imshow(noise_lena)
title('高斯噪声污染的lena');
subplot(1,2,2);
imshow(image2)
title("几何均值滤波");
%谐波均值滤波
HmF=ones(n,n);
for i=gap+1:M-gap
    for j=gap+1:N-gap
        temp=image(i-gap:i+gap,j-gap:j+gap).*HmF(1:n,1:n);
        temp2=HmF./temp;
        image2(i,j)=n*n/sum(temp2(:));
    end
end
image2=uint8(image2);
figure(3)
subplot(1,2,1);
imshow(noise_lena)
title('高斯噪声污染的lena');
subplot(1,2,2);
imshow(image2)
title("谐波均值滤波");
%逆谐波均值 Q=1
ImF=ones(n,n);
Q=1;
for i=gap+1:M-gap
    for j=gap+1:N-gap
        temp=image(i-gap:i+gap,j-gap:j+gap).*ImF(1:n,1:n);
        ms=sum(sum(temp.^Q));
        ms2=sum(sum(temp.^(Q+1)));
        image2(i,j)=ms2/ms;
    end
end
image2=uint8(image2);
figure(4)
subplot(1,2,1);
imshow(noise_lena)
title('高斯噪声污染的lena');
subplot(1,2,2);
imshow(image2)
title("逆谐波均值滤波");
%中点滤波
MF=ones(n,n);
for i=gap+1:M-gap
    for j=gap+1:N-gap
        temp=image(i-gap:i+gap,j-gap:j+gap).*MF(1:n,1:n);
        mymax=max(temp(:));
        mymin=min(temp(:));
        image2(i,j)=0.5*(mymax+mymin);
    end
end
image2=uint8(image2);
figure(5)
subplot(1,2,1);
imshow(noise_lena)
title('高斯噪声污染的lena');
subplot(1,2,2);
imshow(image2)
title("中点滤波");
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

2.salt & pepper和五种滤波器处理

imagepath = 'F:\Digital Image Processing\work\The sixth\lena.bmp';
lena = imread(imagepath);
noise_lena = imnoise(lena,'salt & pepper',0.1);%附加椒盐噪声
%滤波前准备
n = 5;
gap = (n-1)/2;
[M,N] = size(noise_lena);
image = double(noise_lena);
%中值滤波
MF = ones(n,n);
for i = gap+1:M-gap
    for j = gap+1:N-gap
        temp = image(i-gap:i+gap,j-gap:j+gap).*MF(1:n,1:n);
        image2(i,j) = median(temp(:));
    end
end
figure(1)
subplot(1,2,1);
imshow(noise_lena)
title('椒盐噪声污染的lena');
image2=uint8(image2);
subplot(1,2,2);
imshow(image2)
title("中值滤波");
%最大最小值滤波
GmF=ones(n,n);
image3=image2;
for i=gap+1:M-gap
    for j=gap+1:N-gap
        temp=image(i-gap:i+gap,j-gap:j+gap).*GmF(1:n,1:n);
        image2(i,j)=max(temp(:));
        image3(i,j)=min(temp(:));
    end
end
image2=uint8(image2);
image3=uint8(image3);
figure(2)
subplot(1,3,1);
imshow(noise_lena)
title('椒盐噪声污染的lena');
subplot(1,3,2);
imshow(image2)
title("最大值滤波");
subplot(1,3,3);
imshow(image3)
title("最小值滤波");
%修正的阿尔法均值滤波器
k=2;
GmF=ones(n,n);
for i=gap+1:M-gap
    for j=gap+1:N-gap
        temp=image(i-gap:i+gap,j-gap:j+gap).*GmF(1:n,1:n);
        temp2=sort(temp(:));
        temp3=temp2(k:n*n-k);
        image2(i,j)=sum(temp3)/(n*n-2*k);
    end
end
figure(3)
subplot(1,2,1);
imshow(noise_lena)
title('椒盐噪声污染的lena');
image2=uint8(image2);
subplot(1,2,2);
imshow(image2)
title("修正的阿尔法滤波");
%谐波滤波器
HmF=ones(n,n);
for i=gap+1:M-gap
    for j=gap+1:N-gap
        temp=image(i-gap:i+gap,j-gap:j+gap).*HmF(1:n,1:n);
        temp2=HmF./temp;
        image2(i,j)=n*n/sum(temp2(:));
    end
end
figure(4)
subplot(1,2,1);
imshow(noise_lena)
title('椒盐噪声污染的lena');
image2=uint8(image2);
subplot(1,2,2);
imshow(image2);
title("谐波均值滤波");
%反谐波滤波器
figure(5)
subplot(1,3,1);
imshow(noise_lena)
title('椒盐噪声污染的lena');
ImF=ones(n,n);
Q=[-0.5,0.5];
for m=1:2
    for i=gap+1:M-gap
        for j=gap+1:N-gap
            temp=image(i-gap:i+gap,j-gap:j+gap).*ImF(1:n,1:n);
            ms=sum(sum(temp.^Q(m)));
            ms2=sum(sum(temp.^(Q(m)+1)));
            image2(i,j)=ms2/ms;
        end
    end
image2=uint8(image2);
subplot(1,3,m+1);
imshow(image2)
str1='反谐波滤波器Q=';
str2=num2str(Q(m));
string=[str1,str2];
title(string);    
end
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

3.1.运动模糊+高斯噪声+Wiener滤波+K值选取

imagepath = 'F:\Digital Image Processing\work\The sixth\lena.bmp';
lena = imread(imagepath);
figure(1)
subplot(2,2,1);
imshow(lena)
title('lena原图');
%傅里叶变换
f = double(lena);     
F = fft2(f);      
F = fftshift(F);   
[M,N] = size(F);
%模糊滤波器
a = 0.1; 
b = 0.1;
T = 1;
for i = 1:M
    for j = 1:N     
     H(i,j) = (T/(pi*(i*a+j*b)))*sin(pi*(i*a+j*b))*exp(-sqrt(-1)*pi*(i*a+j*b));
     G(i,j) = H(i,j)*F(i,j);%图像退化
    end
end
%傅里叶反变换
G = ifftshift(G);
g = ifft2(G);
%格式转换
g = 256.*g./max(max(g));
g = uint8(real(g));
subplot(2,2,2);
imshow(g)
title('运动模糊化lena'); 
%添加高斯噪声
noise_lena2 = imnoise(g,'gaussian',0,10/(M*N));
subplot(2,2,3);
imshow(noise_lena2)
title('运动模糊+高斯噪声lena');
%维纳滤波
noise_lena2=double(noise_lena2);
G2=fft2(noise_lena2);
G2=fftshift(G2);
[M,N]=size(G2);
wiener=zeros(M,N);
K=10;
for m=1:1000
for i=1:M
    for j=1:N
        wiener(i,j)=(abs(H(i,j)))^2*G2(i,j)/(H(i,j)*((abs(H(i,j)))^2+K));
    end
end
wiener=ifftshift(wiener);
wiener_lena=ifft2(wiener);
wiener_lena=256.*wiener_lena/max(wiener_lena(:));
wiener_lena=uint8(real(wiener_lena));
%寻找合适的参数K
E=sum(sum((wiener_lena(:)-lena(:)).^2));
K=K-0.01
if E<2
       break;
end
end
subplot(2,2,4);
imshow(wiener_lena)
title('Wiener-lena');
format long g
K
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

3.2.运动模糊（MATLAB）+高斯噪声+最小二乘（MATLAB）+参数V选择

imagepath = 'F:\Digital Image Processing\work\The sixth\lena.bmp';
lena = imread(imagepath);
figure(1)
subplot(2,2,1);
imshow(lena)
title('lena原图');
[M,N]=size(lena);
%运动模糊
H=fspecial('motion',50,45);
move_lena=imfilter(lena,H,'circular','conv');
subplot(2,2,2);
imshow(move_lena);
title('运动模糊lena');
%添加高斯噪声
noise_lena2=imnoise(move_lena,'gaussian',0,10/(M*N));
subplot(2,2,3);
imshow(noise_lena2);
title('运动模糊+高斯噪声');
%最小二乘法
optimal_E=100000000;
V=0.000001;
for m=1:1000
%V=0.000001 + (0.01-0.000001)*rand;%随机产生0.000001到0.01的数
NoiseP=V*prod(size(lena));
[A,B]=deconvreg(noise_lena2,H,NoiseP);
E(m)=sum(sum((A(:)-lena(:)).^2));
    if E(m)<=optimal_E
        optimal_E=E(m)
        optimal_V = V
        optimal_lena = A;
    end
V=V+0.000001;
end
optimal_V
subplot(2,2,4);
imshow(optimal_lena)
title('约束最小二乘');
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――